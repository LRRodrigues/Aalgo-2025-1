# Dever 1

import time
import random

# Implementação do Merge Sort
def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    
    # Divide o array em duas metades
    mid = len(arr) // 2
    left_half = merge_sort(arr[:mid])   # Recursivamente ordena a metade esquerda
    right_half = merge_sort(arr[mid:])  # Recursivamente ordena a metade direita

    # Mescla as duas metades ordenadas
    return merge(left_half, right_half)

def merge(left, right):
    sorted_list = []
    i = j = 0

    # Percorre os dois subarrays e mescla ordenadamente
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            sorted_list.append(left[i])
            i += 1
        else:
            sorted_list.append(right[j])
            j += 1

    # Adiciona os elementos restantes (se assim houver)
    sorted_list.extend(left[i:])
    sorted_list.extend(right[j:])

    return sorted_list

# Função para medir o tempo de execução
def medir_tempo_ordenacao(tamanho):
    arr = [random.randint(0, 1000000) for _ in range(tamanho)]  # Gera lista aleatória
    inicio = time.time()  # Marca o tempo inicial
    merge_sort(arr)       # Ordena a lista
    fim = time.time()     # Marca o tempo final
    return fim - inicio   # Retorna o tempo decorrido

# Testando os tamanhos especificados
tamanhos = [100, 1000, 10000, 100000]
tempos = {t: medir_tempo_ordenacao(t) for t in tamanhos}

# Exibindo resultados
for tamanho, tempo in tempos.items():
    print(f"Tamanho: {tamanho} - Tempo de execução: {tempo:.6f} segundos")

